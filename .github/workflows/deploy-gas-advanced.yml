name: Deploy to Google Apps Script (Advanced)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_description:
        description: 'Deployment description'
        required: false
        default: 'Manual deployment from GitHub Actions'
      force_deploy:
        description: 'Force deployment even on non-main branch'
        type: boolean
        required: false
        default: false

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Type check
      run: pnpm run build  # This includes vue-tsc type checking

    - name: Build project
      run: pnpm run build:gas

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gas-build-${{ github.sha }}
        path: gas-dist/
        retention-days: 7

  deploy-to-gas:
    name: Deploy to Google Apps Script
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: gas-build-${{ github.sha }}
        path: gas-dist/

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install clasp globally
      run: pnpm add -g @google/clasp@latest

    - name: Create clasp credentials directory
      run: mkdir -p ~/.config/clasp

    - name: Setup clasp credentials
      run: echo '${{ secrets.CLASP_CREDENTIALS }}' > ~/.config/clasp/credentials.json

    - name: Verify clasp setup
      run: |
        cd gas-dist
        clasp status || echo "Status check completed"

    - name: Push to Apps Script
      run: |
        cd gas-dist
        echo "Pushing files to Google Apps Script..."
        clasp push --force
      env:
        CLASP_CREDENTIALS: ${{ secrets.CLASP_CREDENTIALS }}

    - name: Deploy to production
      if: |
        (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') ||
        (github.event_name == 'workflow_dispatch' && inputs.force_deploy == 'true')
      run: |
        cd gas-dist
        DESCRIPTION="${{ github.event.inputs.deploy_description || format('Automated deployment - {0}', github.sha) }}"
        echo "Deploying with description: $DESCRIPTION"
        clasp create-version --description "$DESCRIPTION"
      env:
        CLASP_CREDENTIALS: ${{ secrets.CLASP_CREDENTIALS }}

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "✅ **Production deployment completed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "📋 **Code pushed to Apps Script (no production deployment)**" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Quick Links:**" >> $GITHUB_STEP_SUMMARY
        echo "- [Apps Script Console](https://script.google.com/)" >> $GITHUB_STEP_SUMMARY
        echo "- [Project Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Failure
    needs: [lint-and-test, deploy-to-gas]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Create failure summary
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The deployment to Google Apps Script failed." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Common issues:**" >> $GITHUB_STEP_SUMMARY
        echo "- Invalid CLASP_CREDENTIALS secret" >> $GITHUB_STEP_SUMMARY
        echo "- Missing or incorrect scriptId in .clasp.json" >> $GITHUB_STEP_SUMMARY
        echo "- Google Apps Script API not enabled" >> $GITHUB_STEP_SUMMARY
        echo "- Insufficient permissions for the Apps Script project" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the workflow logs for detailed error information."
